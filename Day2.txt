19. Remove Nth Node From End of List
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
        {
            return null;
        }
        // Edge case
        // Find the length of the linked list
        ListNode temp=head;
        int length=0;
        while(temp!=null)
        {
            length++;
            temp=temp.next;
        }

        
        // res= Length-n
        

        if(length==n)
        {
            ListNode newnode=head.next;
            head=null;
            return newnode;
        }
        int res=length-n;
        temp=head;
        // loop lagaunga start se leke jabtak res 0 na ho jae,
        while(temp!=null)
        {
            res--;
           

            if(res==0)
            {
                break;
            }
             temp=temp.next;
        }
        ListNode delNode = temp.next;
        temp.next=temp.next.next;
        delNode=null;
        return head;
        // Jab res 0 ho jae , jaha pe bhi temp rukega.
        // temp.next=temp.next.next;
        // return head;
        //Edge case if length==n , matlab first head to return head= head.next
    }
}

2095. Delete the Middle Node of a Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        //Brute force approach
        // 1. Length nikal
        // 2. Middle ko delete karna hai to middle pe direct jake matlab nahi , go one step back of the middle
        //3.Length/2 nikal; usko res initialise kar
        //4. while(temp!=null) res ko - kar until 0 ho jae.
        //5. Ek baar res 0 ho gaya to samajh le ki ,middle ke ek pehle wala node aa gya
        //6. Ab bas link change karni hai.

        if(head==null || head.next==null)
        {
            return null;
        }

        ListNode temp=head;
        int length=0;
        while(temp!=null)
        {
            length++;
            temp=temp.next;
        }

        int res=length/2;
        temp=head;

        while(temp!=null)
        {
            res--;
            if(res==0)
            {
                ListNode delnode=temp.next;
                temp.next=temp.next.next;
                break;
            }
            temp=temp.next;
        }
        return head;
    }
}


148. Sort List

import java.util.ArrayList;

class Solution {

    public ListNode sortList(ListNode head) {
        // Brute approach
        /**
        1.We already know that, sorting an array is very easy. Whenever sorting a list comes into the picture.
        Always try to convert it into an array.
        2.After converting linked list to an array.
        3.Now the problem becomes the same as sorting an array using any of the Sorting algorithms.
        4.After sorting the array, put back all the elements from the array to the linked list
        5.return head.
         */

        ListNode temp = head;
        ArrayList<Integer> arr = new ArrayList<>();
        while (temp != null) {
            arr.add(temp.val);
            temp = temp.next;
        }

        mergeSort(arr, 0, arr.size() - 1);

        temp = head;
        for (int i = 0; i < arr.size(); i++) {
            temp.val = arr.get(i);
            temp = temp.next;
        }
        return head;
    }

    private void mergeSort(ArrayList<Integer> arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    private void merge(ArrayList<Integer> arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        ArrayList<Integer> leftArr = new ArrayList<>(arr.subList(left, left + n1));
        ArrayList<Integer> rightArr = new ArrayList<>(arr.subList(mid + 1, mid + 1 + n2));

        int i = 0, j = 0, k = left;

        while (i < n1 && j < n2) {
            if (leftArr.get(i) <= rightArr.get(j)) {
                arr.set(k, leftArr.get(i));
                i++;
            } else {
                arr.set(k, rightArr.get(j));
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr.set(k, leftArr.get(i));
            i++;
            k++;
        }

        while (j < n2) {
            arr.set(k, rightArr.get(j));
            j++;
            k++;
        }
    }
}



