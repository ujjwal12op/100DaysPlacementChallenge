Day 12 : 30/12/24

Q1) Balanced Binary Tree


class Solution {
    public boolean isBalanced(TreeNode root) {
        return dfsHeight(root)!=-1;
    }
     int dfsHeight(TreeNode root){

         if(root==null)
         {
             return 0;
         }
        int lh = dfsHeight(root.left);
        int rh = dfsHeight(root.right);

        if(lh==-1 || rh==-1)
        {
            return -1;
        }
        if(Math.abs(lh-rh)>1)
        {
            return -1;
        }
        return Math.max(lh,rh)+1;
    }
}


Q2) Diametre of Binary Tree

class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        int[] diametre = new int[1];
        height(root,diametre);
        return diametre[0];
    }

    private int height(TreeNode node,int[] diametre)
    {
        if(node==null)
        {
            return 0;
        }

        int lh = height(node.left,diametre);
        int rh = height(node.right,diametre);
        diametre[0] = Math.max(diametre[0],lh+rh);
        return 1+Math.max(lh,rh);
    }
}

Q3) Binary Tree Maximum Path Sum

class Solution {
    public int maxPathSum(TreeNode root) {
        int maxValue[]=new int[1];
        maxValue[0] = Integer.MIN_VALUE;
        maxPathDown(root,maxValue);
        return maxValue[0];
    }

    private int maxPathDown(TreeNode node,int maxValue[])
    {
        if(node==null) return 0;
        int left = Math.max(0,maxPathDown(node.left,maxValue));
        int right = Math.max(0,maxPathDown(node.right,maxValue));
        maxValue[0] = Math.max(maxValue[0],left+right+node.val);
        return Math.max(left,right)+ node.val;  
    }
}