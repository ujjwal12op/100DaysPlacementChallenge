DSA

1. Check if linked list is a palindrome or not


Brute

a) Stack banao
b) Linked list ke elements stack me dalo
c) Temp ko wapas head pe dalo
d) check karo temp data with stack ke top pe , pop karte jao , teemp badhate jao , jaha bhi unequal mile false nahi to true.


Optimized approach

public class Solution {

    public static Node reverseLinked(Node head) {
        // 3 pointer approach.
        Node temp = head;
        Node prev = null;

        while (temp != null) {
            Node first = temp.next;
            temp.next = prev;

            prev = temp;
            temp = first;
        }
        return prev;
    }

    public static boolean isPalindrome(Node head) {
        if (head == null || head.next == null) {
            return true;
        }

        // Find middle using Tortoise and Hare method
        Node slow = head;
        Node fast = head;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        Node secondHalfReversed = reverseLinked(slow.next);

        Node first = head;
        Node second = secondHalfReversed;

        while (second != null) {
            if (first.data != second.data) {
                // If data doesn't match, reverse the second half back and return false
                reverseLinked(secondHalfReversed);
                return false;
            }
            first = first.next;
            second = second.next;
        }

        // Reverse the second half back
        reverseLinked(secondHalfReversed);
        return true;
    }
}


2. Segreagate Odd and even Nodesa

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //Time : O(n/2)*2 = O(n)
 //Space : O(1)

 
class Solution {
    public ListNode oddEvenList(ListNode head) {
        //
        if(head==null && head.next==null)
        {
                return head;
        }

        ListNode odd = head;
        ListNode even=odd.next;
        ListNode evenHead = odd.next;

        while(even!=null && even.next!=null)
        {
            odd.next=odd.next.next;
            even.next=even.next.next;

            odd=odd.next;
            even=even.next;
        }
        odd.next=evenHead;

        return head;
    }
}
3. Remove nth node

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null)
        {
            return null;
        }
        // Edge case
        // Find the length of the linked list
        ListNode temp=head;
        int length=0;
        while(temp!=null)
        {
            length++;
            temp=temp.next;
        }

        
        // res= Length-n
        

        if(length==n)
        {
            ListNode newnode=head.next;
            head=null;
            return newnode;
        }
        int res=length-n;
        temp=head;
        // loop lagaunga start se leke jabtak res 0 na ho jae,
        while(temp!=null)
        {
            res--;
           

            if(res==0)
            {
                break;
            }
             temp=temp.next;
        }
        ListNode delNode = temp.next;
        temp.next=temp.next.next;
        delNode=null;
        return head;
        // Jab res 0 ho jae , jaha pe bhi temp rukega.
        // temp.next=temp.next.next;
        // return head;
        //Edge case if length==n , matlab first head to return head= head.next
    }
}
 

DataScience

1. 


Decision Tree 

Tree Structure:

A Decision Tree is a hierarchical model that resembles an upside-down tree, with a root node at the top and branches leading to leaf nodes at the bottom.
Each internal node of the tree represents a decision based on the value of a specific feature.
Each leaf node represents the final decision or outcome.
Decision Making:

At each internal node, the algorithm evaluates a specific feature of the input data.
Based on the feature's value, the algorithm decides which branch to follow.
Leaf Nodes:

The leaf nodes contain the final output or decision for a given set of input features.
Training:

During the training phase, the algorithm learns from the data by recursively splitting it into subsets based on the values of different features.
The goal is to create a tree that makes accurate predictions on new, unseen data.
Splitting Criteria:

The decision on which feature to split on at each node and the value to use as the splitting threshold is determined by a criterion, often aiming to maximize information gain or Gini impurity.
Pruning (optional):

Decision Trees may grow to be overly complex and prone to overfitting the training data. Pruning techniques can be applied to simplify the tree by removing unnecessary nodes, improving generalization to new data.

Core

Aptitude

